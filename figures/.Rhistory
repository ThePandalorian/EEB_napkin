# Written by Shikhara Bhat
# JGU Mainz, Germany
# Date: Fri Aug 30 15:20:45 2024
###########################
library(ggplot2) #for plotting
library(ggtext) #for formatting labels
library(compiler) #for speeding up code
#plot the logistic map and return long term population values
logistic_map <- function(r, x_0, iterations, last_n){
#Inputs:
#  r: growth rate
#  x: initial value
#  iterations: number of times to apply the logistic map
#  M: number of iteration points to be returned
traj <- 1:iterations
traj[1] <- x_0
for(i in c(1:(iterations-1))){
#the map is f(x) = rx(1-x)
traj[i+1] <- r *traj[i]  * (1 - traj[i])
}
## Return the last M iterations
traj[c((iterations-last_n):iterations)]
}
logistic_map <- cmpfun(logistic_map) # same function as above but now faster
#parameters
r_values <- seq(2.8, 4, 0.001)
x_0 <- 0.1
iterations <- 1000
last_n <- 100
#simulate
out <- sapply(r_values,logistic_map,x_0=x_0,iterations=iterations,last_n=last_n)
x_vals <- c()
r_vals <- c()
for (i in 1:ncol(out)){
x_vals <- c(x_vals,out[,i])
r_vals <- c(r_vals,rep(r_values[i],length(out[,i])))
}
bifurcation <- data.frame(r_vals,x_vals)
colnames(bifurcation) <- c("r", "x")
#plot
p <- ggplot(bifurcation, aes(r, x)) + geom_point(size = 0.01, shape = ".",color='red') + theme_minimal()
#aesthetics
p <- p + ylab('x^*^') + xlab("r")
p <- p + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(5,1,1,1), "lines"))
p <- p + labs(color='')
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 20))
p <- p + theme(axis.title = element_markdown(face = 'bold',color = 'black',size = 25))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0.5))
p <- p + xlim(c(2.8,4)) + theme(aspect.ratio = 1.5)
#save to file
ggsave('logistic_bifurcation.png',p,height = 4, units = 'cm',dpi=500)
p
############################
# Make a bifurcation map of the logistic map
# Written by Shikhara Bhat
# JGU Mainz, Germany
# Date: Fri Aug 30 15:20:45 2024
###########################
library(ggplot2) #for plotting
library(ggtext) #for formatting labels
library(compiler) #for speeding up code
#plot the logistic map and return long term population values
logistic_map <- function(r, x_0, iterations, last_n){
#Inputs:
#  r: growth rate
#  x: initial value
#  iterations: number of times to apply the logistic map
#  M: number of iteration points to be returned
traj <- 1:iterations
traj[1] <- x_0
for(i in c(1:(iterations-1))){
#the map is f(x) = rx(1-x)
traj[i+1] <- r *traj[i]  * (1 - traj[i])
}
## Return the last M iterations
traj[c((iterations-last_n):iterations)]
}
logistic_map <- cmpfun(logistic_map) # same function as above but now faster
#parameters
r_values <- seq(2.8, 4, 0.001)
x_0 <- 0.1
iterations <- 1000
last_n <- 100
#simulate
out <- sapply(r_values,logistic_map,x_0=x_0,iterations=iterations,last_n=last_n)
x_vals <- c()
r_vals <- c()
for (i in 1:ncol(out)){
x_vals <- c(x_vals,out[,i])
r_vals <- c(r_vals,rep(r_values[i],length(out[,i])))
}
bifurcation <- data.frame(r_vals,x_vals)
colnames(bifurcation) <- c("r", "x")
#plot
p <- ggplot(bifurcation, aes(r, x)) + geom_point(size = 0.01, shape = ".",color='red') + theme_minimal()
#aesthetics
p <- p + ylab('x^*^') + xlab("r")
p <- p + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(5,1,1,1), "lines"))
p <- p + labs(color='')
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 20))
p <- p + theme(axis.title = element_markdown(face = 'bold',color = 'black',size = 25))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0.5))
p <- p + xlim(c(2.8,4))
#save to file
ggsave('logistic_bifurcation.png',p,height = 8, width = 4 units = 'cm',dpi=500)
############################
# Make a bifurcation map of the logistic map
# Written by Shikhara Bhat
# JGU Mainz, Germany
# Date: Fri Aug 30 15:20:45 2024
###########################
library(ggplot2) #for plotting
library(ggtext) #for formatting labels
library(compiler) #for speeding up code
#plot the logistic map and return long term population values
logistic_map <- function(r, x_0, iterations, last_n){
#Inputs:
#  r: growth rate
#  x: initial value
#  iterations: number of times to apply the logistic map
#  M: number of iteration points to be returned
traj <- 1:iterations
traj[1] <- x_0
for(i in c(1:(iterations-1))){
#the map is f(x) = rx(1-x)
traj[i+1] <- r *traj[i]  * (1 - traj[i])
}
## Return the last M iterations
traj[c((iterations-last_n):iterations)]
}
logistic_map <- cmpfun(logistic_map) # same function as above but now faster
#parameters
r_values <- seq(2.8, 4, 0.001)
x_0 <- 0.1
iterations <- 1000
last_n <- 100
#simulate
out <- sapply(r_values,logistic_map,x_0=x_0,iterations=iterations,last_n=last_n)
x_vals <- c()
r_vals <- c()
for (i in 1:ncol(out)){
x_vals <- c(x_vals,out[,i])
r_vals <- c(r_vals,rep(r_values[i],length(out[,i])))
}
bifurcation <- data.frame(r_vals,x_vals)
colnames(bifurcation) <- c("r", "x")
#plot
p <- ggplot(bifurcation, aes(r, x)) + geom_point(size = 0.01, shape = ".",color='red') + theme_minimal()
#aesthetics
p <- p + ylab('x^*^') + xlab("r")
p <- p + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(5,1,1,1), "lines"))
p <- p + labs(color='')
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 20))
p <- p + theme(axis.title = element_markdown(face = 'bold',color = 'black',size = 25))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0.5))
p <- p + xlim(c(2.8,4))
#save to file
ggsave('logistic_bifurcation.png',p,height = 8, width = 4, units = 'cm',dpi=500)
############################
# Make a bifurcation map of the logistic map
# Written by Shikhara Bhat
# JGU Mainz, Germany
# Date: Fri Aug 30 15:20:45 2024
###########################
library(ggplot2) #for plotting
library(ggtext) #for formatting labels
library(compiler) #for speeding up code
#plot the logistic map and return long term population values
logistic_map <- function(r, x_0, iterations, last_n){
#Inputs:
#  r: growth rate
#  x: initial value
#  iterations: number of times to apply the logistic map
#  M: number of iteration points to be returned
traj <- 1:iterations
traj[1] <- x_0
for(i in c(1:(iterations-1))){
#the map is f(x) = rx(1-x)
traj[i+1] <- r *traj[i]  * (1 - traj[i])
}
## Return the last M iterations
traj[c((iterations-last_n):iterations)]
}
logistic_map <- cmpfun(logistic_map) # same function as above but now faster
#parameters
r_values <- seq(2.8, 4, 0.001)
x_0 <- 0.1
iterations <- 1000
last_n <- 100
#simulate
out <- sapply(r_values,logistic_map,x_0=x_0,iterations=iterations,last_n=last_n)
x_vals <- c()
r_vals <- c()
for (i in 1:ncol(out)){
x_vals <- c(x_vals,out[,i])
r_vals <- c(r_vals,rep(r_values[i],length(out[,i])))
}
bifurcation <- data.frame(r_vals,x_vals)
colnames(bifurcation) <- c("r", "x")
#plot
p <- ggplot(bifurcation, aes(r, x)) + geom_point(size = 0.01, shape = ".",color='red') + theme_minimal()
#aesthetics
p <- p + ylab('x^*^') + xlab("r")
p <- p + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(5,1,1,1), "lines"))
p <- p + labs(color='')
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 20))
p <- p + theme(axis.title = element_markdown(face = 'bold',color = 'black',size = 25))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0.5))
p <- p + xlim(c(2.8,4))
#save to file
ggsave('logistic_bifurcation.png',p,height = 8, width = 6, units = 'cm',dpi=500)
############################
# Make a bifurcation map of the logistic map
# Written by Shikhara Bhat
# JGU Mainz, Germany
# Date: Fri Aug 30 15:20:45 2024
###########################
library(ggplot2) #for plotting
library(ggtext) #for formatting labels
library(compiler) #for speeding up code
#plot the logistic map and return long term population values
logistic_map <- function(r, x_0, iterations, last_n){
#Inputs:
#  r: growth rate
#  x: initial value
#  iterations: number of times to apply the logistic map
#  M: number of iteration points to be returned
traj <- 1:iterations
traj[1] <- x_0
for(i in c(1:(iterations-1))){
#the map is f(x) = rx(1-x)
traj[i+1] <- r *traj[i]  * (1 - traj[i])
}
## Return the last M iterations
traj[c((iterations-last_n):iterations)]
}
logistic_map <- cmpfun(logistic_map) # same function as above but now faster
#parameters
r_values <- seq(2.8, 4, 0.001)
x_0 <- 0.1
iterations <- 1000
last_n <- 100
#simulate
out <- sapply(r_values,logistic_map,x_0=x_0,iterations=iterations,last_n=last_n)
x_vals <- c()
r_vals <- c()
for (i in 1:ncol(out)){
x_vals <- c(x_vals,out[,i])
r_vals <- c(r_vals,rep(r_values[i],length(out[,i])))
}
bifurcation <- data.frame(r_vals,x_vals)
colnames(bifurcation) <- c("r", "x")
#plot
p <- ggplot(bifurcation, aes(r, x)) + geom_point(size = 0.01, shape = ".",color='red') + theme_minimal()
#aesthetics
p <- p + ylab('x^*^') + xlab("r")
p <- p + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(5,1,1,1), "lines"))
p <- p + labs(color='')
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 20))
p <- p + theme(axis.title = element_markdown(face = 'bold',color = 'black',size = 25))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0.5))
p <- p + xlim(c(2.8,4))
#save to file
ggsave('logistic_bifurcation.png',p,height = 8, width = 6, units = 'in',dpi=500)
############################
# Make a bifurcation map of the logistic map
# Written by Shikhara Bhat
# JGU Mainz, Germany
# Date: Fri Aug 30 15:20:45 2024
###########################
library(ggplot2) #for plotting
library(ggtext) #for formatting labels
library(compiler) #for speeding up code
#plot the logistic map and return long term population values
logistic_map <- function(r, x_0, iterations, last_n){
#Inputs:
#  r: growth rate
#  x: initial value
#  iterations: number of times to apply the logistic map
#  M: number of iteration points to be returned
traj <- 1:iterations
traj[1] <- x_0
for(i in c(1:(iterations-1))){
#the map is f(x) = rx(1-x)
traj[i+1] <- r *traj[i]  * (1 - traj[i])
}
## Return the last M iterations
traj[c((iterations-last_n):iterations)]
}
logistic_map <- cmpfun(logistic_map) # same function as above but now faster
#parameters
r_values <- seq(2.8, 4, 0.001)
x_0 <- 0.1
iterations <- 1000
last_n <- 100
#simulate
out <- sapply(r_values,logistic_map,x_0=x_0,iterations=iterations,last_n=last_n)
x_vals <- c()
r_vals <- c()
for (i in 1:ncol(out)){
x_vals <- c(x_vals,out[,i])
r_vals <- c(r_vals,rep(r_values[i],length(out[,i])))
}
bifurcation <- data.frame(r_vals,x_vals)
colnames(bifurcation) <- c("r", "x")
#plot
p <- ggplot(bifurcation, aes(r, x)) + geom_point(size = 0.01, shape = ".",color='red') + theme_minimal()
#aesthetics
p <- p + ylab('') + xlab("")
p <- p + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(5,1,1,1), "lines"))
p <- p + labs(color='')
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 20))
p <- p + theme(axis.title = element_markdown(face = 'bold',color = 'black',size = 25))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(axis.ticks.length = unit(0, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0))
p <- p + xlim(c(2.8,4))
#save to file
ggsave('logistic_bifurcation.png',p,height = 6, width = 4, units = 'in',dpi=500)
############################
# Make a bifurcation map of the logistic map
# Written by Shikhara Bhat
# JGU Mainz, Germany
# Date: Fri Aug 30 15:20:45 2024
###########################
library(ggplot2) #for plotting
library(ggtext) #for formatting labels
library(compiler) #for speeding up code
#plot the logistic map and return long term population values
logistic_map <- function(r, x_0, iterations, last_n){
#Inputs:
#  r: growth rate
#  x: initial value
#  iterations: number of times to apply the logistic map
#  M: number of iteration points to be returned
traj <- 1:iterations
traj[1] <- x_0
for(i in c(1:(iterations-1))){
#the map is f(x) = rx(1-x)
traj[i+1] <- r *traj[i]  * (1 - traj[i])
}
## Return the last M iterations
traj[c((iterations-last_n):iterations)]
}
logistic_map <- cmpfun(logistic_map) # same function as above but now faster
#parameters
r_values <- seq(2.8, 4, 0.001)
x_0 <- 0.1
iterations <- 1000
last_n <- 100
#simulate
out <- sapply(r_values,logistic_map,x_0=x_0,iterations=iterations,last_n=last_n)
x_vals <- c()
r_vals <- c()
for (i in 1:ncol(out)){
x_vals <- c(x_vals,out[,i])
r_vals <- c(r_vals,rep(r_values[i],length(out[,i])))
}
bifurcation <- data.frame(r_vals,x_vals)
colnames(bifurcation) <- c("r", "x")
#plot
p <- ggplot(bifurcation, aes(r, x)) + geom_point(size = 0.01, shape = ".",color='red') + theme_minimal()
#aesthetics
p <- p + ylab('') + xlab("")
p <- p + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(5,1,1,1), "lines"))
p <- p + labs(color='')
p <- p + theme(panel.border = element_blank(), axis.line =  element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 0))
p <- p + theme(axis.title = element_markdown(face = 'bold',color = 'black',size = 25))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(axis.ticks.length = unit(0, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0))
p <- p + xlim(c(2.8,4))
#save to file
ggsave('logistic_bifurcation.png',p,height = 6, width = 4, units = 'in',dpi=500)
############################
# Make a bifurcation map of the logistic map
# Written by Shikhara Bhat
# JGU Mainz, Germany
# Date: Fri Aug 30 15:20:45 2024
###########################
library(ggplot2) #for plotting
library(ggtext) #for formatting labels
library(compiler) #for speeding up code
#plot the logistic map and return long term population values
logistic_map <- function(r, x_0, iterations, last_n){
#Inputs:
#  r: growth rate
#  x: initial value
#  iterations: number of times to apply the logistic map
#  M: number of iteration points to be returned
traj <- 1:iterations
traj[1] <- x_0
for(i in c(1:(iterations-1))){
#the map is f(x) = rx(1-x)
traj[i+1] <- r *traj[i]  * (1 - traj[i])
}
## Return the last M iterations
traj[c((iterations-last_n):iterations)]
}
logistic_map <- cmpfun(logistic_map) # same function as above but now faster
#parameters
r_values <- seq(2.8, 4, 0.001)
x_0 <- 0.1
iterations <- 1000
last_n <- 100
#simulate
out <- sapply(r_values,logistic_map,x_0=x_0,iterations=iterations,last_n=last_n)
x_vals <- c()
r_vals <- c()
for (i in 1:ncol(out)){
x_vals <- c(x_vals,out[,i])
r_vals <- c(r_vals,rep(r_values[i],length(out[,i])))
}
bifurcation <- data.frame(r_vals,x_vals)
colnames(bifurcation) <- c("r", "x")
#plot
p <- ggplot(bifurcation, aes(r, x)) + geom_point(size = 0.01, shape = ".",color='red') + theme_minimal()
#aesthetics
p <- p + ylab('') + xlab("")
p <- p + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(1,1,1,1), "lines"))
p <- p + labs(color='')
p <- p + theme(panel.border = element_blank(), axis.line =  element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 0))
p <- p + theme(axis.title = element_markdown(face = 'bold',color = 'black',size = 25))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(axis.ticks.length = unit(0, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0))
p <- p + xlim(c(2.8,4))
#save to file
ggsave('logistic_bifurcation.png',p,height = 6, width = 4, units = 'in',dpi=500)
############################
# Make a bifurcation map of the logistic map
# Written by Shikhara Bhat
# JGU Mainz, Germany
# Date: Fri Aug 30 15:20:45 2024
###########################
library(ggplot2) #for plotting
library(ggtext) #for formatting labels
library(compiler) #for speeding up code
#plot the logistic map and return long term population values
logistic_map <- function(r, x_0, iterations, last_n){
#Inputs:
#  r: growth rate
#  x: initial value
#  iterations: number of times to apply the logistic map
#  M: number of iteration points to be returned
traj <- 1:iterations
traj[1] <- x_0
for(i in c(1:(iterations-1))){
#the map is f(x) = rx(1-x)
traj[i+1] <- r *traj[i]  * (1 - traj[i])
}
## Return the last M iterations
traj[c((iterations-last_n):iterations)]
}
logistic_map <- cmpfun(logistic_map) # same function as above but now faster
#parameters
r_values <- seq(2.8, 4, 0.001)
x_0 <- 0.1
iterations <- 1000
last_n <- 100
#simulate
out <- sapply(r_values,logistic_map,x_0=x_0,iterations=iterations,last_n=last_n)
x_vals <- c()
r_vals <- c()
for (i in 1:ncol(out)){
x_vals <- c(x_vals,out[,i])
r_vals <- c(r_vals,rep(r_values[i],length(out[,i])))
}
bifurcation <- data.frame(r_vals,x_vals)
colnames(bifurcation) <- c("r", "x")
#plot
p <- ggplot(bifurcation, aes(r, x)) + geom_point(size = 0.01, shape = ".",color='red') + theme_minimal()
#aesthetics
p <- p + ylab('') + xlab("")
p <- p + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(0,0,0,0), "lines"))
p <- p + labs(color='')
p <- p + theme(panel.border = element_blank(), axis.line =  element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 0))
p <- p + theme(axis.title = element_markdown(face = 'bold',color = 'black',size = 25))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(axis.ticks.length = unit(0, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0))
p <- p + xlim(c(2.8,4))
#save to file
ggsave('logistic_bifurcation.png',p,height = 6, width = 4, units = 'in',dpi=500)
