)
SSA[i] <- as.data.frame(stoch_out[[1]])$N[tfinal]
#Fokker Planck and WNA are in terms of pop density. Multiply by K to convert back to pop size.
SDE[i] <- K*suppressMessages(sde.sim(X0=1,T=tfinal,drift=SDE_drift,sigma=SDE_diffusion,N=steps))[steps+1]
WNA[i] <- K*(1 + (1/sqrt(K))*(suppressMessages(sde.sim(X0=0,T=tfinal,drift=WNA_drift,sigma=WNA_diffusion,N=steps))[steps+1])) #WNA measures fluctuation y = sqrt(K)(x-alpha). We want x here.
}
running_time = Sys.time() - sim_start_time
print(running_time) #see how long simulations took
################################################################################
#plotting
plot_data <- data.frame(sim=c(rep('Stochastic IbM (simulations)',length(SSA)),rep('Fokker-Planck equation (theory)',length(SDE)),rep('Weak Noise Approximation (theory)',length(WNA))),N=c(SSA,SDE,WNA))
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(8500,1100)) + ylim(c(0,0.0035))
p <- p + scale_linetype_manual(name='',values=c("solid","dashed","dashed")) + scale_color_manual(name='',values=c('#000000','#ff0000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
ggsave(paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/plots/1D_K_',K,'.svg',sep=''),p,width=12,height=8,dpi=600)
write.csv(plot_data,paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/K_',K,'.csv',sep=''))
# plot_data <- data.frame(sim=c(rep('Exact stochastic population dynamics (simulation)',length(SSA)),rep('Weak Noise Approximation (theory)',length(WNA))),N=c(SSA,WNA))
#
# p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7) + xlim(c(8500,11000)) + ylim(c(0,0.0035))
# p <- p + scale_linetype_manual(name='',values=c("solid","dashed")) + scale_color_manual(name='',values=c('#000000','#ff0000')) + scale_alpha_manual(values=c(1,0.7))
#
# #aesthetics
# p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
# p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
# p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
# p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
# p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
# p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(8500,11000)) + ylim(c(0,0.0035))
p <- p + scale_linetype_manual(name='',values=c("solid","dashed","dashed")) + scale_color_manual(name='',values=c('#000000','#ff0000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
plot_data <- data.frame(sim=c(rep('Exact Stochastic IbM (simulations)',length(SSA)),rep('Fokker-Planck equation (theory)',length(SDE)),rep('Weak Noise Approximation (theory)',length(WNA))),N=c(SSA,SDE,WNA))
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(8500,11000)) + ylim(c(0,0.0035))
p <- p + scale_linetype_manual(name='',values=c("solid","dashed","dashed")) + scale_color_manual(name='',values=c('#000000','#ff0000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
ggsave(paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/plots/1D_K_',K,'.svg',sep=''),p,width=12,height=8,dpi=600)
write.csv(plot_data,paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/K_',K,'.csv',sep=''))
plot_data <- data.frame(sim=c(rep('Exact Stochastic IbM',length(SSA)),rep('Weak Noise Approximation (theory)',length(WNA))),N=c(SSA,WNA))
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(8500,11000)) + ylim(c(0,0.0035))
p <- p + scale_linetype_manual(name='',values=c("solid","dashed")) + scale_color_manual(name='',values=c('#000000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
plot_data <- data.frame(sim=c(rep('Exact Stochastic birth-death model (simulations)',length(SSA)),rep('Weak Noise Approximation (theory)',length(WNA))),N=c(SSA,WNA))
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(8500,11000)) + ylim(c(0,0.0035))
p <- p + scale_linetype_manual(name='',values=c("solid","dashed")) + scale_color_manual(name='',values=c('#000000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
p + geom_vline(10000)
p + geom_vline(x=10000)
p + geom_vline(xintercept = 10000)
p + geom_vline(xintercept = 10000, linetype='dashed')
plot_data <- data.frame(sim=c(rep('Exact Stochastic IbM (simulations)',length(SSA)),rep('Fokker-Planck equation (theory)',length(SDE)),rep('Weak Noise Approximation (theory)',length(WNA))),N=c(SSA,SDE,WNA))
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(8500,11000)) + ylim(c(0,0.0035)) + geom_vline(xintercept = K, linetype='dashed')
p <- p + scale_linetype_manual(name='',values=c("solid","dashed","dashed")) + scale_color_manual(name='',values=c('#00ff00','#ff0000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
ggsave(paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/plots/1D_K_',K,'.svg',sep=''),p,width=12,height=6,dpi=600)
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(8500,11000)) + ylim(c(0,0.0035))
p <- p + scale_linetype_manual(name='',values=c("solid","dashed","dashed")) + scale_color_manual(name='',values=c('#000000','#ff0000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
ggsave(paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/plots/1D_K_',K,'.svg',sep=''),p,width=12,height=6,dpi=600)
############################
# Compare the steady state densities of Gillespie, FPE, and Weak noise approx
# for the stochastic logistic equation.
# Written by Shikhara Bhat
# IISER Pune, India
# Date: Thu Jan 05 21:50:16 2023
###########################
library(GillespieSSA) #for exact stochastic simulations using Gillespie
library(deSolve) #for numerical integration of deterministic equations
library(sde) #for numerical integration of SDEs
library(ggplot2) #for plotting
#Model
b = 2 #birth rate
d = 1 #death rate
K = 1000 #carrying capacity
#for convenience, define difference and sum
r=b-d
v=b+d
params_stoch <- c(b = b, d = d, K = K)       # Parameter list
tfinal <- 200                                # Final time
simName <- "Logistic growth (Gillespie)"
#For the SSA
x0 <- c(N = K) #initial population. Start population at deterministic steady state (N=K)
nu <- matrix(c(+1, -1),ncol = 2) #transition matrix (specifies possible transitions)
a  <- c("b*N", "(d+(b-d)*N/K)*N") #update rules
#For the complete Fokker-Planck
SDE_drift <- expression(r*x*(1-x))
SDE_diffusion <- expression(sqrt((x*(v+r*x))/K))
#for the WNA. I have substituted alpha(t) = 1 (deterministic steady state)
WNA_drift <- expression(-r*x)
WNA_diffusion <- expression(sqrt(v+r))
steps = 100000 #step size for numerical integration
runs = 1000 #number of realizations to average over
sim_start_time <- Sys.time() #just to see how long code takes to run
SSA <- SDE <- WNA <- rep(0,runs)
set.seed(31415) #for reproducibility
for (i in 1:runs) {
stoch_out <- ssa( #run the Gillespie (time intensive)
x0 = x0,
a = a,
nu = nu,
parms = params_stoch,
tf = tfinal,
method =ssa.otl(),
simName = simName,
verbose = FALSE,
consoleInterval = 1
)
SSA[i] <- as.data.frame(stoch_out[[1]])$N[tfinal]
#Fokker Planck and WNA are in terms of pop density. Multiply by K to convert back to pop size.
SDE[i] <- K*suppressMessages(sde.sim(X0=1,T=tfinal,drift=SDE_drift,sigma=SDE_diffusion,N=steps))[steps+1]
WNA[i] <- K*(1 + (1/sqrt(K))*(suppressMessages(sde.sim(X0=0,T=tfinal,drift=WNA_drift,sigma=WNA_diffusion,N=steps))[steps+1])) #WNA measures fluctuation y = sqrt(K)(x-alpha). We want x here.
}
running_time = Sys.time() - sim_start_time
print(running_time) #see how long simulations took
################################################################################
#plotting
plot_data <- data.frame(sim=c(rep('Exact Stochastic IbM (simulations)',length(SSA)),rep('Fokker-Planck equation (theory)',length(SDE)),rep('Weak Noise Approximation (theory)',length(WNA))),N=c(SSA,SDE,WNA))
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(800,1200)) + ylim(c(0,0.01))
p <- p + scale_linetype_manual(name='',values=c("solid","dashed","dashed")) + scale_color_manual(name='',values=c('#000000','#ff0000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
ggsave(paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/plots/1D_K_',K,'.svg',sep=''),p,width=12,height=6,dpi=600)
write.csv(plot_data,paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/K_',K,'.csv',sep=''))
############################
# Compare the steady state densities of Gillespie, FPE, and Weak noise approx
# for the stochastic logistic equation.
# Written by Shikhara Bhat
# IISER Pune, India
# Date: Thu Jan 05 21:50:16 2023
###########################
library(GillespieSSA) #for exact stochastic simulations using Gillespie
library(deSolve) #for numerical integration of deterministic equations
library(sde) #for numerical integration of SDEs
library(ggplot2) #for plotting
#Model
b = 2 #birth rate
d = 1 #death rate
K = 500 #carrying capacity
#for convenience, define difference and sum
r=b-d
v=b+d
params_stoch <- c(b = b, d = d, K = K)       # Parameter list
tfinal <- 200                                # Final time
simName <- "Logistic growth (Gillespie)"
#For the SSA
x0 <- c(N = K) #initial population. Start population at deterministic steady state (N=K)
nu <- matrix(c(+1, -1),ncol = 2) #transition matrix (specifies possible transitions)
a  <- c("b*N", "(d+(b-d)*N/K)*N") #update rules
#For the complete Fokker-Planck
SDE_drift <- expression(r*x*(1-x))
SDE_diffusion <- expression(sqrt((x*(v+r*x))/K))
#for the WNA. I have substituted alpha(t) = 1 (deterministic steady state)
WNA_drift <- expression(-r*x)
WNA_diffusion <- expression(sqrt(v+r))
steps = 100000 #step size for numerical integration
runs = 1000 #number of realizations to average over
sim_start_time <- Sys.time() #just to see how long code takes to run
SSA <- SDE <- WNA <- rep(0,runs)
set.seed(31415) #for reproducibility
for (i in 1:runs) {
stoch_out <- ssa( #run the Gillespie (time intensive)
x0 = x0,
a = a,
nu = nu,
parms = params_stoch,
tf = tfinal,
method =ssa.otl(),
simName = simName,
verbose = FALSE,
consoleInterval = 1
)
SSA[i] <- as.data.frame(stoch_out[[1]])$N[tfinal]
#Fokker Planck and WNA are in terms of pop density. Multiply by K to convert back to pop size.
SDE[i] <- K*suppressMessages(sde.sim(X0=1,T=tfinal,drift=SDE_drift,sigma=SDE_diffusion,N=steps))[steps+1]
WNA[i] <- K*(1 + (1/sqrt(K))*(suppressMessages(sde.sim(X0=0,T=tfinal,drift=WNA_drift,sigma=WNA_diffusion,N=steps))[steps+1])) #WNA measures fluctuation y = sqrt(K)(x-alpha). We want x here.
}
running_time = Sys.time() - sim_start_time
print(running_time) #see how long simulations took
################################################################################
#plotting
plot_data <- data.frame(sim=c(rep('Exact Stochastic IbM (simulations)',length(SSA)),rep('Fokker-Planck equation (theory)',length(SDE)),rep('Weak Noise Approximation (theory)',length(WNA))),N=c(SSA,SDE,WNA))
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(800,1200)) + ylim(c(0,0.01))
p <- p + scale_linetype_manual(name='',values=c("solid","dashed","dashed")) + scale_color_manual(name='',values=c('#000000','#ff0000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
ggsave(paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/plots/1D_K_',K,'.svg',sep=''),p,width=12,height=6,dpi=600)
write.csv(plot_data,paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/K_',K,'.csv',sep=''))
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(400,600)) + ylim(c(0,0.013))
p <- p + scale_linetype_manual(name='',values=c("solid","dashed","dashed")) + scale_color_manual(name='',values=c('#000000','#ff0000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
p <- ggplot(data=plot_data,aes(x=N,group=sim,color=sim)) + geom_density(aes(linetype=sim,color=sim),adjust=1.7)
p <- p + xlim(c(350,650)) + ylim(c(0,0.013))
p <- p + scale_linetype_manual(name='',values=c("solid","dashed","dashed")) + scale_color_manual(name='',values=c('#000000','#ff0000','#0000ff'))
#aesthetics
p <- p + theme_light() + ylab('Steady state density') + xlab("Population size (N)")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
p
ggsave(paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/plots/1D_K_',K,'.svg',sep=''),p,width=12,height=6,dpi=600)
write.csv(plot_data,paste('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/gillespie_vs_FPE_vs_WNA/K_',K,'.csv',sep=''))
############################
# Compare the steady state densities of Gillespie, FPE, and Weak noise approx
# for the stochastic logistic equation.
# Written by Shikhara Bhat
# IISER Pune, India
# Date: Thu Jan 05 21:50:16 2023
###########################
library(GillespieSSA) #for exact stochastic simulations using Gillespie
library(deSolve) #for numerical integration of deterministic equations
library(sde) #for numerical integration of SDEs
library(ggplot2) #for plotting
set.seed(314159) #for reproducibility
#Model
b = 2 #birth rate
d = 1 #death rate
K = 10000 #carrying capacity
#for convenience, define difference and sum
r=b-d
v=b+d
params_stoch <- c(b = b, d = d, K = K)       # Parameter list
tfinal <- 200                                # Final time
simName <- "Logistic growth (Gillespie)"
#For the SSA
x0 <- c(N = K) #initial population. Start population at deterministic steady state (N=K)
nu <- matrix(c(+1, -1),ncol = 2) #transition matrix (specifies possible transitions)
a  <- c("b*N", "(d+(b-d)*N/K)*N") #update rules
#For the complete Fokker-Planck
SDE_drift <- expression(r*x*(1-x))
SDE_diffusion <- expression(sqrt((x*(v+r*x))/K))
#for the WNA. I have substituted alpha(t) = 1 (deterministic steady state)
WNA_drift <- expression(-r*x)
WNA_diffusion <- expression(sqrt(v+r))
steps = 100000 #step size for numerical integration
runs = 1000 #number of realizations to average over
sim_start_time <- Sys.time() #just to see how long code takes to run
SSA <- SDE <- WNA <- rep(0,runs)
for (i in 1:runs) {
stoch_out <- ssa( #run the Gillespie (time intensive)
x0 = x0,
a = a,
nu = nu,
parms = params_stoch,
tf = tfinal,
method =ssa.otl(),
simName = simName,
verbose = FALSE,
consoleInterval = 1
)
SSA[i] <- as.data.frame(stoch_out[[1]])$N[tfinal]
#Fokker Planck and WNA are in terms of pop density. Multiply by K to convert back to pop size.
SDE[i] <- K*suppressMessages(sde.sim(X0=1,T=tfinal,drift=SDE_drift,sigma=SDE_diffusion,N=steps))[steps+1]
WNA[i] <- K*(1 + (1/sqrt(K))*(suppressMessages(sde.sim(X0=0,T=tfinal,drift=WNA_drift,sigma=WNA_diffusion,N=steps))[steps+1])) #WNA measures fluctuation y = sqrt(K)(x-alpha). We want x here.
}
library(ash)
library(askpass)
detach("package:ash", unload = TRUE)
detach("package:askpass", unload = TRUE)
remove.packages("usethis", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("htmltools", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("htmlwidgets", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("ini", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("fields", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("maptools", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("maps", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("maptree", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("mime", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("httr", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("rvest", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("RCurl", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("curl", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("jsonlite", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("jquerylib", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("sp", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("shiny", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("lifecycle", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
remove.packages("misc3d", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
library(GillespieSSA) #for stochastic simulations
library(deSolve) #for numerical integration of deterministic equations
library(ggplot2) #for plotting
library(gganimate) #for animating ggplots
setwd('/home/shikhara/Work/MS_thesis/code/original_code/misc_for_fun/logistic_sim_same_w_different_tau/')
set.seed(2878) #for reproducibility
#parameters for stochastic sims
b1 = 4 #birth rate 1
d1 = 2 #death rate 1
b2 = 31 #birth rate 2
d2 = 29 #death rate 2
K1 = 150 #carrying capacity 1
K2 = 150 #carrying capacity 2
runs = 10 #number of realizations
#for convenience, define difference and sum of birth and death rates
r1=b1-d1
v1=b1+d1
r2=b2-d2
v2=b2+d2
steps = 10000 #step size for numerical integration
params_stoch_1 <- c(b = b1, d = d1, K = K1)      # Parameter list
params_stoch_2 <- c(b = b2, d = d2, K = K2)      # Parameter list
tfinal <- 30                                   # Final time
x0 <- c(N = 50) #initial population
nu <- matrix(c(+1, -1),ncol = 2) #transition matrix (specifies possible transitions)
a  <- c("b*N", "(d+(b-d)*N/K)*N") #update rules
#Run the Gillespie simulation of the IbM
stoch_out_1 <- ssa(
x0 = x0, #initial condition
a = a,   #transition rates
nu = nu, #possible transitions
parms = params_stoch_1, #parameters
tf = tfinal, #final time uptil which to run the model
method =ssa.otl(), #simulation method. otl is optimized tau leap.
simName = '', #unimportant
verbose = FALSE, #dont print the output
consoleInterval = 1 #unimportant
)
stoch_out_2 <- ssa(
x0 = x0, #initial condition
a = a,   #transition rates
nu = nu, #possible transitions
parms = params_stoch_2, #parameters
tf = tfinal, #final time uptil which to run the model
method =ssa.otl(), #simulation method. otl is optimized tau leap.
simName = '', #unimportant
verbose = FALSE, #dont print the output
consoleInterval = 1 #unimportant
)
stoch_data_1 <- as.data.frame(stoch_out_1[[1]]) #get output as dataframe
stoch_data_1 <- cbind(stoch_data_1,state=rep('Stochastic dynamics (model 1)',nrow(stoch_data_1)))
stoch_data_2 <- as.data.frame(stoch_out_2[[1]]) #get output as dataframe
stoch_data_2 <- cbind(stoch_data_2,state=rep('Stochastic dynamics (model 2)',nrow(stoch_data_2)))
#############################################################################
logistic <- function(time,N,params){
with(as.list(c(N, params)), {
# "with" creates an "environment" within which R looks for values
# our differential equation for growth
dNdt <- r * N * (1 - (N/K))
# making the function create output, which must be a list with
# one element
return(list( dNdt ))
} )
}
params_deterministic_1 <- c(r=r1, K = K1)
params_deterministic_2 <- c(r=r2, K = K2)
timelist <- seq(0,tfinal,by=tfinal/steps) #times for integration
#numerically integrate the logistic eqn for the deterministic trajectory
det_data_1 <- as.data.frame(ode(x0,timelist,func=logistic,parms=params_deterministic_1))
det_data_2 <- as.data.frame(ode(x0,timelist,func=logistic,parms=params_deterministic_2))
#convert output to dataframe
names(det_data_1)[1] <- 't'
det_data_1 <- cbind(det_data_1,state=rep(('Deterministic limit (model 1)'),nrow(det_data_1)))
names(det_data_2)[1] <- 't'
det_data_2 <- cbind(det_data_2,state=rep(('Deterministic limit (model 2)'),nrow(det_data_2)))
################################################################################
#plotting
#collate the data for plotting
plot_data <- rbind(det_data_1,det_data_2,stoch_data_1,stoch_data_2)
#make sure everything is the right data type
plot_data$t <- as.numeric(plot_data$t)
plot_data$N <- as.numeric(plot_data$N)
#create the plot
p <- ggplot(data=plot_data,aes(x=t,y=N,group=state)) + geom_line(aes(linetype=state,color=state,alpha=state))
p <- p + scale_linetype_manual(name='',values=c("dashed","dashed","solid", "solid")) + scale_color_manual(name='',values=c('#000000','#000000','#ff0000','#0000ff'))
p <- p + scale_alpha_manual(name='',values=c(1,1,0.2,0.2))
#aesthetics
p <- p + theme_light() + ylab('Population size') + xlab("Time")
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
#p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 12))
#p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 12))
p <- p + theme(legend.position = 'none') #remove legend
p <- p + theme(aspect.ratio = 1) #set aspect ratio
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',size=0.5))
for (i in 1:(runs-1)){
stoch_out_1 <- ssa(
x0 = x0, #initial condition
a = a,   #transition rates
nu = nu, #possible transitions
parms = params_stoch_1, #parameters
tf = tfinal, #final time uptil which to run the model
method =ssa.otl(), #simulation method. otl is optimized tau leap.
simName = '', #unimportant
verbose = FALSE, #dont print the output
consoleInterval = 1 #unimportant
)
stoch_out_2 <- ssa(
x0 = x0, #initial condition
a = a,   #transition rates
nu = nu, #possible transitions
parms = params_stoch_2, #parameters
tf = tfinal, #final time uptil which to run the model
method =ssa.otl(), #simulation method. otl is optimized tau leap.
simName = '', #unimportant
verbose = FALSE, #dont print the output
consoleInterval = 1 #unimportant
)
stoch_data_1 <- as.data.frame(stoch_out_1[[1]]) #get output as dataframe
stoch_data_1 <- cbind(stoch_data_1,state=rep('Stochastic dynamics (model 1)',nrow(stoch_data_1)))
stoch_data_2 <- as.data.frame(stoch_out_2[[1]]) #get output as dataframe
stoch_data_2 <- cbind(stoch_data_2,state=rep('Stochastic dynamics (model 2)',nrow(stoch_data_2)))
#collate the data for plotting
plot_data <- rbind(stoch_data_1,stoch_data_2)
#make sure everything is the right data type
plot_data$t <- as.numeric(plot_data$t)
plot_data$N <- as.numeric(plot_data$N)
#create the plot
p <- p + geom_line(data=plot_data,aes(x=t,y=N,group=state,linetype=state,color=state,alpha=state))
# p <- p + scale_linetype_manual(aes(x=t,y=N,group=state),name='',values=c("solid", "solid")) + scale_color_manual(aes(x=t,y=N,group=state),name='',values=c('#0000ff','#ff0000'))
# p <- p + scale_alpha_manual(aes(x=t,y=N,group=state),name='',values=c(0.2,0.2))
}
p
p + ylim(c(-1,400))
p + ylim(c(-100,400))
View(plot_data)
vignette("lotka_predator_prey", package="GillespieSSA")
vignette("sir", package="GillespieSSA")
vignette("decaying_dimer", package="GillespieSSA")
